name: Aseprite CI
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
    
    - name: MSVC Configuration
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Install Dependencies
      shell: bash
      run: |
        # 修正点1：使用正确的7z解压参数
        skia_url="https://github.com/aseprite/skia/releases/latest/download/Skia-Windows-Release-x64.zip"
        curl -L -o skia.zip "$skia_url" --retry 3
        
        # 下载必需DLL（修复运行时缺失）
        declare -a dlls=(
          "libcrypto-1_1-x64.dll" "libssl-1_1-x64.dll"
          "vcruntime140.dll" "vcruntime140_1.dll" "msvcp140.dll"
        )
        for dll in "${dlls[@]}"; do
          curl -L "https://github.com/blueloveTH/aseprite/releases/download/v0.01/$dll" -o "$dll"
        done
        
        # 关键修复：-o 指定输出目录（原错误参数 -skia）
        7z x skia.zip -oskia  # 注意 -o 和目录名之间无空格 
    
    - name: Configure CMake
      shell: bash
      run: |
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DLAF_BACKEND=skia \
          -DENABLE_UI=ON \
          -DSKIA_DIR=$PWD/skia \
          -DSKIA_LIBRARY_DIR=$PWD/skia/out/Release-x64
    
    - name: Compile
      shell: bash
      run: |
        cd build
        ninja -j $(nproc)
        # 运行时验证
        ./bin/aseprite.exe --version || echo "运行时验证失败"
    
    - name: Package Artifacts
      shell: bash
      run: |
        mkdir -p dist
        cp build/bin/aseprite.exe dist/
        cp *.dll dist/  # 包含所有必需DLL
        cp -r build/bin/data dist/
        7z a aseprite-${{ matrix.build_type }}.zip ./dist/*
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprime-build
        path: aseprite-*.zip

name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        skia_url=$(source "${GITHUB_WORKSPACE//\\//}/laf/misc/skia-url.sh" | xargs)
        skia_file=$(basename "$skia_url")
        curl --retry 3 --ssl-revoke-best-effort -L -o "$skia_file" "$skia_url"
        unzip -q "$skia_file" -d skia
    
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
    
    - name: Generating Makefiles
      shell: bash
      run: |
        # Windows 专用配置
        export enable_ccache=off
        [[ "${{ matrix.ui }}" == "gui" ]] && export laf_backend=skia || export laf_backend=none
        [[ "${{ matrix.scripting }}" == "lua" ]] && export enable_scripting=on || export enable_scripting=off
        export skia_arch=x64  # Windows 固定为 x64

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR="$PWD/skia" \
          -DSKIA_LIBRARY_DIR="$PWD/skia/out/Release-$skia_arch"
    
    - name: Compiling
      shell: bash
      run: cd build && ninja
    
    - name: Verify Build Output
      shell: powershell
      run: |
        # 验证编译是否成功
        if (-not (Test-Path "build\bin\aseprite.exe")) {
            Write-Error "❌ aseprite.exe not generated in build\bin"
            Get-ChildItem build\bin -Recurse
            exit 1
        }
        Write-Host "✅ Build successful - aseprite.exe exists"
    
    - name: Running C++ Tests
      shell: bash
      run: cd build && ctest --output-on-failure
    
    - name: Running CLI Tests
      if: ${{ matrix.scripting == 'lua' }}
      shell: bash
      run: |
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        bash run-tests.sh
    
    - name: Extract Version (Bash)
      shell: bash
      run: |
        # 使用 Bash 替代 PowerShell 提取版本号
        if [[ -f "build/src/ver.h" ]]; then
            ver_file="build/src/ver.h"
        else
            ver_file="src/ver.h"
        fi
        
        # 提取版本号并存储到环境变量
        version=$(grep '#define VERSION' "$ver_file" | awk '{print $3}' | tr -d '"')
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "Extracted version: $version"
    
    - name: Package Release
      shell: bash
      run: |
        # 使用 Bash 进行打包操作
        pkg_dir="aseprite-$VERSION-windows-${{ matrix.ui }}-${{ matrix.build_type }}"
        mkdir -p "$pkg_dir"
        
        # 复制所有二进制文件
        cp build/bin/aseprite.* "$pkg_dir/"
        
        # 添加 MSVC 运行时
        if [[ -f "build/bin/vc_redist.x64.exe" ]]; then
            cp "build/bin/vc_redist.x64.exe" "$pkg_dir/"
        fi
        
        # 压缩打包
        zip -r "$pkg_dir.zip" "$pkg_dir"
        
        # 设置输出路径
        echo "PACKAGE_PATH=$(pwd)/$pkg_dir.zip" >> $GITHUB_ENV
        echo "Package created at: $(pwd)/$pkg_dir.zip"
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-build-${{ matrix.ui }}-${{ matrix.build_type }}
        path: ${{ env.PACKAGE_PATH }}
